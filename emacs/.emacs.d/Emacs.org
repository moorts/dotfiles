#+title Emacs Configuration

#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :results none

* Setup
** Package Management

#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src
** Stuff
#+begin_src emacs-lisp
    (use-package exec-path-from-shell
    :config
  (exec-path-from-shell-initialize))
#+end_src
* Appearance
** Window Appearance

Remove scrollbar, enable line numbers, that type of thing.

#+begin_src emacs-lisp

    (setq inhibit-startup-message t)

    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (set-fringe-mode 10)

    (menu-bar-mode -1)

    (setq visible-bell t)

    (column-number-mode)
    (global-display-line-numbers-mode t)

    (setq display-line-numbers-type 'relative)

    ;; Disable line numbers for Some modes
    (dolist (mode '(pdf-view-mode
                    org-mode-hook
                    term-mode-hook
                    shell-mode-hook
                    vterm-mode-hook
                    treemacs-mode-hook
                    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Editor Appearance
#+begin_src emacs-lisp
      ; Current Line Decoration
    (global-hl-line-mode 1)
    (set-face-background 'hl-line nil)
    (set-face-attribute hl-line-face nil :underline t)

    (dolist (mode '(pdf-view-mode
                    vterm-mode-hook))
      (add-hook mode (lambda () (set-face-attribute hl-line-face nil :underline nil))))

#+end_src
** Color Scheme

#+begin_src emacs-lisp
    ;; (use-package gruvbox-theme
    ;;   :config (load-theme 'gruvbox-dark-hard t))
    ;; (use-package shades-of-purple-theme
    ;;   :config (load-theme 'shades-of-purple t))

    ; Use Doom Themes
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'my-shades-of-purple t)

    ;; Overwrite begin/end line color
    ;;(custom-set-faces

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** Rainbow-Delims

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Nyan Mode
#+begin_src emacs-lisp
  (use-package nyan-mode
    :config (nyan-mode t))
#+end_src
* Programming
** Language Modes

#+begin_src emacs-lisp
   (use-package rust-mode
      :bind(("C-c r" . rust-run))
      :config
      (add-hook 'rust-mode-hook
         (lambda () (setq indent-tabs-mode nil))))

  (use-package yaml-mode)
  (use-package lua-mode)
  (use-package markdown-mode)
  (use-package cuda-mode)

#+end_src

*** Haskell Mode

#+begin_src emacs-lisp
      (use-package haskell-mode
        :bind(("C-c h" . (lambda () (interactive) (compile "source ~/.zshrc; stack build --fast"))))
        :config
        (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
        (let ((my-stack-path (expand-file-name "~/.ghcup/bin")))
        (setenv "PATH" (concat my-stack-path path-separator (getenv "PATH")))
        (add-to-list 'exec-path my-stack-path))
        (custom-set-variables '(haskell-process-type 'stack-ghci))
      )

      (use-package format-all
        :hook
        (haskell-mode . format-all-mode)
    :config
    ;(add-hook 'haskell-mode 'format-all-mode)
    (add-hook 'format-all-mode-hook 'format-all-ensure-formatter)
    (add-to-list 'format-all-default-formatters '("Haskell" fourmolu)))

#+end_src

*** Stuff for C++
#+begin_src emacs-lisp
(setq c-default-style "linux"
          c-basic-offset 4)
#+end_src

** Indentation
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq indent-line-function 'insert-tab)
#+end_src
* Terminals
** Eshell
** Vterm
#+begin_src emacs-lisp
    (use-package vterm
      :config
      (setq vterm-buffer-name-string "vterm %s"))
#+end_src
** Term
#+begin_src emacs-lisp
  (use-package term
    :config
    (setq explicit-shell-file-name "bash")
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src
* Keybindings
** Evil-Mode

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)

    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
  (use-package evil-numbers)
(global-set-key (kbd "C-c +") 'evil-numbers/inc-at-pt)
(global-set-key (kbd "C-c -") 'evil-numbers/dec-at-pt)
#+end_src

** Ivy + Counsel

#+begin_src emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-ibuffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history))
  :config
  (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^
  

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+end_src

** General

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer vogel/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (vogel/leader-keys
      :keymaps 'normal
      "b" 'counsel-switch-buffer))

  (vogel/leader-keys
    "s" 'hydra-text-scale/body)
#+end_src

** Hydra

#+begin_src emacs-lisp
(use-package hydra
  :defer t)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))
#+end_src

** Helpful

#+begin_src emacs-lisp
(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

** Which-Key

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+end_src

* Project Management
** Projectile

#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/repos")
    (setq projectile-project-search-path '("~/repos")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

** Perspective
#+begin_src emacs-lisp
(use-package perspective
  :bind (("C-x C-b" . persp-counsel-switch-buffer)         ; or use a nicer switcher, see below
         ("C-x p l" . projectile-persp-switch-project))         ; or use a nicer switcher, see below
  :custom
  (persp-mode-prefix-key (kbd "C-x x"))  ; pick your own prefix key here
  :init
  (persp-mode))
#+end_src
** Magit

#+begin_src emacs-lisp
(use-package magit)
  ;:custom
  ;(magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

* Font Configuration

#+begin_src emacs-lisp
  (defvar efs/default-font-size 100)
  (defvar efs/default-variable-font-size 100)

  (set-face-attribute 'default nil :font "Fira Code Retina" :height efs/default-font-size)


  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height efs/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular)

#+end_src

* Org Mode

** General

#+begin_src emacs-lisp
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-agenda-files '("~/agenda"))
    (setq org-agenda-include-diary nil)
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (efs/org-font-setup))
#+end_src

** Bullets + Fonts

#+begin_src emacs-lisp
    (defun efs/org-font-setup ()
      ;; Replace list hyphen with dot
      (font-lock-add-keywords 'org-mode
                              '(("^ *\\([-]\\) "
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

      ;; Set faces for heading levels
      (dolist (face '((org-level-1 . 1.2)
                      (org-level-2 . 1.1)
                      (org-level-3 . 1.05)
                      (org-level-4 . 1.0)
                      (org-level-5 . 1.1)
                      (org-level-6 . 1.1)
                      (org-level-7 . 1.1)
                      (org-level-8 . 1.1)))
        (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

    (use-package org-bullets
      :after org
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Org Babel

#+begin_src emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (C . t)))

    (setq org-confirm-babel-evaluate nil)
#+end_src

* Research
** PDF
#+begin_src emacs-lisp
    ;; (use-package openwith
    ;;   :config
    ;;   (openwith-mode t)
    ;;   (setq openwith-associations '(("\\.pdf\\'" "/home/moorts/.config/zathura/za_tabbed.sh" (file)))))

    ;; PDF Tools
    (use-package pdf-tools
      :config (pdf-tools-install))
#+end_src

** Org-roam
#+begin_src emacs-lisp
  (use-package org-roam
  :config
    (setq org-roam-directory (file-truename "~/org-roam"))
    (org-roam-db-autosync-mode)
    (setq org-roam-capture-templates
      '(("m" "main" plain
        "%?"
        :if-new (file+head "main/${slug}.org"
                            "#+title: ${title}\n")
        :immediate-finish t
        :unnarrowed t)
        ("r" "reference" plain "%?"
        :if-new
        (file+head "reference/${title}.org" "#+title: ${title}\n")
        :immediate-finish t
        :unnarrowed t)
        ("a" "article" plain "%?"
        :if-new
        (file+head "articles/${title}.org" "#+title: ${title}\n#+filetags: :article:\n")
        :immediate-finish t
        :unnarrowed t)))
    (cl-defmethod org-roam-node-type ((node org-roam-node))
      "Return the TYPE of NODE."
      (condition-case nil
          (file-name-nondirectory
          (directory-file-name
            (file-name-directory
            (file-relative-name (org-roam-node-file node) org-roam-directory))))
        (error "")))
    (setq org-roam-node-display-template
          (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag))))
#+end_src
** BibTeX
#+begin_src emacs-lisp
    (use-package ivy-bibtex
      :config
      (setq bibtex-completion-bibliography
            (file-truename "~/org-roam/library.bib"))
      (setq bibtex-completion-pdf-field "file")
      :bind
      (("C-; b" . ivy-bibtex)))

    (use-package org-roam-bibtex
      :after org-roam
      :config (org-roam-bibtex-mode))
#+end_src
* Structure Templates

#+begin_src emacs-lisp
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("cpp" . "src C++"))
#+end_src

* Miscellaneous

** Some Global Keybindings

#+begin_src emacs-lisp
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)

  ;;(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** Rules
#+begin_src emacs-lisp
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))

    ; Backups
  (defvar --backup-directory (concat user-emacs-directory "backups"))
  (if (not (file-exists-p --backup-directory))
      (make-directory --backup-directory t))
  (setq backup-directory-alist `(("." . ,--backup-directory)))
  (setq make-backup-files t               ; backup of a file the first time it is saved.
        vc-make-backup-files t            ; backup files registered in version control
        backup-by-copying t               ; don't clobber symlinks
        version-control t                 ; version numbers for backup files
        delete-old-versions t             ; delete excess backup files silently
        delete-by-moving-to-trash t
        kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
        auto-save-default t               ; auto-save every buffer that visits a file
        auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
        auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
        )
#+end_src
** Pass
#+begin_src emacs-lisp
  (use-package pass)
#+end_src

** Notmuch
#+begin_src emacs-lisp
;; (autoload 'notmuch "notmuch" "notmuch mail" t)
#+end_src
* Auto-Tangle Configuration Files

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/repos/dotfiles/emacs/.emacs.d/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

* Window Management

** EXWM Configuration

#+begin_src emacs-lisp :tangle no
  (defun efs/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (use-package exwm
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 5)

    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

    ;; Rebind CapsLock to Ctrl
    (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")

    ;; Set the screen resolution (update this to be the correct resolution for your screen!)
    (require 'exwm-randr)
    (exwm-randr-enable)
    ;; (start-process-shell-command "xrandr" nil "xrandr --output Virtual-1 --primary --mode 2048x1152 --pos 0x0 --rotate normal")

    ;; Load the system tray before exwm-init
    (require 'exwm-systemtray)
    (exwm-systemtray-enable)

    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
      '(?\C-x
        ?\C-u
        ?\C-h
        ?\M-x
        ?\M-`
        ?\M-&
        ?\M-:
        ?\C-\M-j  ;; Buffer list
        ?\C-\ ))  ;; Ctrl+Space

    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
          `(
            ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
            ([?\s-r] . exwm-reset)

            ;; Move between windows
            ([s-left] . windmove-left)
            ([s-right] . windmove-right)
            ([s-up] . windmove-up)
            ([s-down] . windmove-down)

            ;; Launch applications via shell command
            ([?\s-&] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))

            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)
            ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

            ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))))

    (exwm-enable))
#+end_src
